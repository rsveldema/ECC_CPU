start: include* namespace

include: "#" "include"  (string | "<" IDENT "." IDENT ">")

namespace:  "namespace" IDENT "{" global_decls global_methods "}"

global_decls: global_decl*

global_methods: method*

global_decl: using_decl | static_decl | enum_decl | struct_decl

struct_decl: "struct" IDENT "{" member_decl* "}" ";"

member_decl: type IDENT ";"

using_decl: USING IDENT "=" type ";"

static_decl: STATIC "constexpr" type IDENT "=" expr ";"

enum_decl: ENUM "class" IDENT ":" type "{" IDENT ("," IDENT)* "}" ";"



method: type IDENT "(" params ")" block

params: (param ("," param)*)?

param: type IDENT

block: "{" stmt* "}"


stmt: local_decl
|     object_init
|     while_stmt
|     block
|     if_stmt
|     call_stmt
|     break_stmt
|     continue_stmt
|     assign_stmt
|     switch_stmt
|     return_stmt

return_stmt: "return" expr ";"

switch_stmt: "switch" "(" expr ")" "{" case_list "}"

case_list: (case_stmt | default_stmt)*

case_stmt: "case" qual_ident ":" block?

default_stmt: "default" ":" block

break_stmt: "break" ";"

continue_stmt: "continue" ";"

call_stmt: access "(" args ")" ";"

access: qual_ident ("." IDENT)? ("->" IDENT)?


if_stmt: "if" "(" expr ")" block ("else" block)?

while_stmt: "while" "(" expr ")" block

assign_stmt:   access some_assign_op expr ";"

local_decl: type IDENT "=" expr ";"

object_init: type IDENT "(" args ")" ";"
|            type IDENT "{" args "}" ";"

some_assign_op: assign_op | assign_add

assign_op: "="

assign_add: "+="

args: (expr ("," expr)*)?


expr: term (binary_op term)?

binary_op: cmp_eq | plus | cmp_neq | bit_and | bit_or | mult | divide | bit_shl | bit_shr | subtract

cmp_eq: "=="
cmp_neq: "!="
plus: "+"
subtract: "-"
mult: "*"
divide: "/"
bit_and: "&"
bit_or: "|"
bit_shl: "<<"
bit_shr: ">>"

term: "(" expr ")"
| number_expr
| string
| false_expr
| true_expr
| array_access
| sizeof_term
| access_expr
| hex_number_expr
| bit_not_expr
| static_cast


bit_not_expr: "~" term

hex_number_expr: HEX_NUMBER

access_expr: access ("(" args ")")?

static_cast: "static_cast" "<" type ">" "(" expr ")"

true_expr: "true"

false_expr: "false"

number_expr: NUMBER

array_access: qual_ident  "[" expr "]"

sizeof_term: "sizeof" "(" expr ")"

qual_ident: IDENT

type: ("const")? ( booltype
|                  user_defined_type
|                  autotype)

user_defined_type: qual_ident_type ("<" IDENT "," expr ">")? ("&")?

qual_ident_type: qual_ident

booltype: "bool" 

autotype: "auto" 


string : ESCAPED_STRING

IDENT: ("a".."z"|"A".."Z"|"_")("a".."z"|"A".."Z"|"_"|"0".."9"|"::")*

NUMBER: ("0".."9")+

HEX_NUMBER: "0" "x" ("a".."z"|"A".."Z"|"0".."9")+


_NEWLINE: "\n"

COMMENT: "//" /[^\n]*/ _NEWLINE

USING: "using"
STATIC: "static"
ENUM: "enum"

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS


%ignore COMMENT
%ignore WS
