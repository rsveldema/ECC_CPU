start: include* namespace

include: "#include"  (string | "<" IDENT "." IDENT ">")

namespace:  "namespace" IDENT "{" global_decls ("METHOD_SECTION" ";" global_methods)? "}"

global_decls: global_decl*

global_methods: method*

global_decl: using_decl | static_decl | enum_decl | struct_decl | union_decl | interface_decl | local_decl ";"

using_decl: USING IDENT "=" type ";"


struct_decl: "struct" IDENT "{" member_decl* "}" ";"

union_decl: "union" IDENT "{" member_decl* "}" ";"

interface_decl: "INTERFACE" IDENT "{" global_decls ("METHOD_SECTION" ";" global_methods)? "}" ";"


member_decl: type IDENT ";"


static_decl: STATIC "constexpr" type IDENT "=" expr ";"

enum_decl: ENUM IDENT ":" type "{" IDENT ("," IDENT)* "}" ";"

method: (STATIC | INLINE)* template_params? type method_name_qual_ident "(" params ")" ("const")? block

template_params: "template" "<" template_arg ("," template_arg)* ">"

template_arg: type IDENT

template_instance_args: IDENT ("," IDENT)*

params: (param ("," param)*)?

param: type IDENT

block: "{" stmt* "}"


stmt: local_decl ";"
|     while_stmt
|     block
|     if_stmt
|     for_stmt
|     call_stmt
|     break_stmt
|     continue_stmt
|     assign_stmt
|     switch_stmt
|     return_stmt
|     inc_stmt ";"

inc_stmt: IDENT "++"

return_stmt: "return" expr ";"

switch_stmt: "switch" "(" expr ")" "{" case_list "}"

case_list: (case_stmt | default_stmt)*

case_stmt: "case" qual_ident ":" block?

default_stmt: "default" ":" block

break_stmt: "break" ";"

continue_stmt: "continue" ";"

call_stmt: access "(" args ")" ";"

access: qual_ident ("." IDENT)? ("->" IDENT)?

lhs: access ("[" term "]")?

if_stmt: "if" "(" expr ")" block ("else" block)?

for_stmt: "for" "(" local_decl ";" expr ";" inc_stmt ")" block 

while_stmt: "while" "(" expr ")" block

assign_stmt:   lhs some_assign_op expr ";"

local_decl: type IDENT ("=" expr)?

some_assign_op: assign_op | assign_add | assign_or

assign_op: "="

assign_add: "+="

assign_or: "|="

args: (expr ("," expr)*)?


expr: term (binary_op term)?

binary_op: cmp_eq | plus | cmp_neq | bit_and | bit_or | mult | divide | bit_shl | bit_shr | subtract | cmp_lt | cmp_gt | cmp_le | cmp_ge

cmp_eq: "=="
cmp_neq: "!="
plus: "+"
subtract: "-"
mult: "*"
divide: "/"
bit_and: "&"
bit_or: "|"
bit_shl: "<<"
bit_shr: ">>"
cmp_lt: "<"
cmp_gt: ">"
cmp_le: "<="
cmp_ge: ">="

term: "(" expr ")"
| number_expr
| string
| false_expr
| true_expr
| array_access
| sizeof_term
| access_expr
| hex_number_expr
| bit_not_expr
| logical_not_expr
| static_cast


bit_not_expr: "~" term

logical_not_expr: "!" term

hex_number_expr: HEX_NUMBER

access_expr: access ("(" args ")")?
array_access: access  "[" expr "]"

static_cast: "static_cast" "<" type ">" "(" expr ")"

true_expr: "true"

false_expr: "false"

number_expr: NUMBER


sizeof_term: "sizeof" "(" expr ")"

qual_ident: IDENT ("::" IDENT)?

method_name_qual_ident: IDENT ("<" template_instance_args ">")? ("::" IDENT)?

type: ("const")? ( booltype
| uint8_t
| uint16_t
| uint32_t
| uint64_t
| int8_t
| int16_t
| int32_t
| int64_t
| user_defined_type
| autotype)

uint8_t: "uint8_t"

uint16_t: "uint16_t"

uint32_t: "uint32_t"

uint64_t: "uint64_t"

int8_t: "int8_t"

int16_t: "int16_t"

int32_t: "int32_t"

int64_t: "int64_t"

user_defined_type: qual_ident_type ("<" IDENT "," term ">")? ("&")?

qual_ident_type: qual_ident

booltype: "bool" 

autotype: "auto" 


string : ESCAPED_STRING

IDENT: ("$" | "a".."z"|"A".."Z"|"_")("a".."z"|"A".."Z"|"_"|"0".."9")*

NUMBER: ("0".."9")+

HEX_NUMBER: "0" "x" ("a".."z"|"A".."Z"|"0".."9")+


_NEWLINE: "\n"

COMMENT: "//" /[^\n]*/ _NEWLINE

MULTILINE_COMMENT: /\/\*.*?\*\//s

STATIC: "static"
INLINE: "inline"
ENUM: "enum"

USING: "using"


%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS


%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore WS
